{"version":3,"sources":["assets/github.svg","styles/global.ts","pages/Dashboard/styles.ts","assets/logo.svg","components/bar-info/style.ts","components/bar-info/index.tsx","components/form/styles.ts","components/form/index.tsx","services/api.ts","services/repository.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","githubBackground","Title","styled","h1","Repositories","div","Bar","BarInfo","title","description","alt","avatar","src","size","Form","form","props","hasError","css","shade","Error","span","FormComponent","submit","useState","inputError","setInputError","newRepo","setNewRepo","handleSubmit","event","preventDefault","error","onSubmit","e","value","onChange","target","placeholder","type","api","axios","create","baseURL","process","localStorageKey","repository","this","get","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setItem","stringify","Dashboard","RepositoryService","getLocalRepository","setRepositories","useEffect","setRepository","logo","getRepositoryData","then","data","handleAddRepository","map","to","full_name","owner","avatar_url","login","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","issues","setIssues","response","getIssue","Logo","stargazers_count","forks_count","open_issues_count","issue","href","html_url","user","id","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c2768ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github.cef25cd4.svg\";","import { createGlobalStyle } from 'styled-components';\nimport githubBackground from '../assets/github.svg';\n\nexport default createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    outline: 0;\n  }\n\n  body {\n    -webkit-font-smoothing: antialiased;\n    background: #E5E5E5 url(${githubBackground}) no-repeat 70% top;\n    font-family: 'Roboto', sans-serif;\n    font-size: 16px;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  color: #3a3a3a;\n  font-size: 48px;\n  margin-top: 80px;\n  max-width: 450px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n\n  a {\n    display: block;\n    text-decoration: none;\n  }\n\n  a + a {\n    margin-top: 16px;\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import styled from 'styled-components';\n\nexport const Bar = styled.div`\n  article {\n    align-items: center;\n    background: #fff;\n    border-radius: 5px;\n    cursor: pointer;\n    display: flex;\n    max-width: 700px;\n    opacity: 0.8;\n    padding: 24px;\n    text-decoration: none;\n    transition: transform 0.2s ease-in-out;\n    width: 100%;\n\n    &:hover {\n      opacity: 1;\n      transform: translateX(16px);\n    }\n  }\n\n  img {\n    border-radius: 50%;\n    height: 64px;\n    width: 64px;\n  }\n\n  div {\n    flex: 1;\n    margin: 0 16px;\n\n    strong {\n      color: #3d3d4d;\n      font-size: 20px;\n    }\n\n    p {\n      color: #a8a8b3;\n      font-size: 18px;\n      margin-top: 4px;\n    }\n  }\n\n  svg {\n    color: #cbcbd6;\n    display: block;\n    margin-left: auto;\n    pointer-events: none;\n  }\n`;\n","/* eslint-disable react/jsx-indent */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Bar } from './style';\n\ntype BarInfoProps = {\n  title: string;\n  description: string;\n  avatar?: string;\n  alt?: string;\n};\n\nconst BarInfo: React.FC<BarInfoProps> = ({\n  title,\n  description,\n  alt,\n  avatar,\n}) => (\n  <Bar>\n    <article>\n      {avatar && <img src={avatar} alt={alt} />}\n      <div>\n        <strong>{title}</strong>\n        <p>{description}</p>\n      </div>\n      <FiChevronRight size={20} />\n    </article>\n  </Bar>\n);\n\nexport default BarInfo;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Form = styled.form<FormProps>`\n  display: flex;\n  margin-top: 40px;\n  max-width: 700px;\n\n  input {\n    border: 2px solid #fff;\n    border-radius: 5px 0 0 5px;\n    border-right: none;\n    color: #a3a3a3;\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    font-family: Roboto;\n    font-size: 20px;\n    line-height: 23px;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n        color: #c53030;\n      `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    background: #04d361;\n    border: none;\n    border-radius: 0 5px 5px 0;\n    color: #ffffff;\n    font-size: 18px;\n    font-weight: bold;\n    height: 70px;\n    line-height: 21px;\n    transition: 0.2s ease-in-out background-color;\n    width: 210px;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  color: #c53030;\n  display: block;\n  margin-top: 8px;\n`;\n","/* eslint-disable react/prop-types */\nimport React, { useState, FormEvent } from 'react';\nimport { Form, Error } from './styles';\n\ntype FormProps = {\n  submit: (newRepo: string) => void;\n};\n\nconst FormComponent: React.FC<FormProps> = ({ submit }) => {\n  const [inputError, setInputError] = useState('');\n  const [newRepo, setNewRepo] = useState('');\n\n  const resetForm = (): void => {\n    setInputError('');\n    setNewRepo('');\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n\n    if (newRepo) {\n      try {\n        submit(newRepo);\n        resetForm();\n      } catch (error) {\n        setInputError('Erro na busca por esse repositório');\n      }\n    } else {\n      setInputError('Digite o autor/nome do repositório');\n    }\n  };\n\n  return (\n    <>\n      <Form hasError={!!inputError} onSubmit={e => handleSubmit(e)}>\n        <input\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do repositorio aqui\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {inputError && <Error>{inputError}</Error>}\n    </>\n  );\n};\n\nexport default FormComponent;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n});\nexport default api;\n","import { AxiosResponse } from 'axios';\nimport api from './api';\n\nexport interface IRepository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nexport interface Issue {\n  title: string;\n  id: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nclass RepositoryService {\n  private api = api;\n\n  private localStorageKey = process.env.REACT_APP_LOCAL_STORAGE_KEY ?? '';\n\n  getRepositoryData(repository: string): Promise<AxiosResponse<IRepository>> {\n    return this.api.get<IRepository>(`repos/${repository}`);\n  }\n\n  getIssue(repository: string): Promise<AxiosResponse<Issue[]>> {\n    return this.api.get<Issue[]>(`repos/${repository}/issues`);\n  }\n\n  getLocalRepository(): IRepository[] {\n    const storagedRepositories = localStorage.getItem(this.localStorageKey);\n    return storagedRepositories ? JSON.parse(storagedRepositories) : [];\n  }\n\n  setRepository(repositories: IRepository[]): void {\n    localStorage.setItem(this.localStorageKey, JSON.stringify(repositories));\n  }\n}\n\nexport default new RepositoryService();\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Title, Repositories } from './styles';\nimport logo from '../../assets/logo.svg';\nimport BarInfo from '../../components/bar-info/index';\nimport Form from '../../components/form/index';\nimport RepositoryService, { IRepository } from '../../services/repository';\n\nconst Dashboard: React.FC = () => {\n  const [repositories, setRepositories] = useState<IRepository[]>(() =>\n    RepositoryService.getLocalRepository(),\n  );\n\n  useEffect(() => {\n    RepositoryService.setRepository(repositories);\n  }, [repositories]);\n\n  function handleAddRepository(newRepo: string): void {\n    RepositoryService.getRepositoryData(newRepo).then(({ data }) =>\n      setRepositories([...repositories, data]),\n    );\n  }\n\n  return (\n    <>\n      <img src={logo} alt=\"Github Explorer\" />\n      <Title>Explore repositórios no Github.</Title>\n      <Form submit={(newRepo: string) => handleAddRepository(newRepo)} />\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`/repositorios/${repository.full_name}`}\n          >\n            <BarInfo\n              title={repository.full_name}\n              description={repository.description}\n              avatar={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  a {\n    align-items: center;\n    color: #a8a8b3;\n    display: flex;\n    text-decoration: none;\n    transition: 0.2s ease-in-out color;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    align-items: center;\n    display: flex;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n  }\n\n  div {\n    margin-left: 24px;\n\n    strong {\n      color: #3d3d4d;\n      font-size: 36px;\n    }\n\n    p {\n      font-size: 18px;\n      color: #737380;\n      margin-top: 4px;\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    strong {\n      display: block;\n      font-size: 36px;\n      color: #3d3d4d;\n    }\n\n    span {\n      display: block;\n      margin-top: 4px;\n      color: #6c6c8c;\n    }\n\n    li + li {\n      margin-left: 80px;\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    display: block;\n    text-decoration: none;\n  }\n\n  a + a {\n    margin-top: 16px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft } from 'react-icons/fi';\nimport { Header, RepositoryInfo, Issues } from './styles';\nimport Logo from '../../assets/logo.svg';\nimport RepositoryService, {\n  Issue,\n  IRepository,\n} from '../../services/repository';\nimport BarInfo from '../../components/bar-info/index';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\nconst Repository: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>();\n  const [repository, setRepository] = useState<IRepository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  useEffect(() => {\n    RepositoryService.getRepositoryData(params.repository).then(response => {\n      setRepository(response.data);\n    });\n\n    RepositoryService.getIssue(params.repository).then(response => {\n      setIssues(response.data);\n    });\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={Logo} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={20} /> Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n            <BarInfo title={issue.title} description={issue.user.login} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard/index';\nimport Repository from '../pages/Repository/index';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositorios/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport GlobalStyle from './styles/global';\nimport Routes from './routes/index';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}